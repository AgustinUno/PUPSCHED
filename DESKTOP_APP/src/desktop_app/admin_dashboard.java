/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package desktop_app;

import com.sun.jdi.connect.spi.Connection;
import static desktop_app.Custom_Yesnodialog.confirm_boolean;
import static desktop_app.Sub_room.setTime;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import javax.swing.JOptionPane;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;

import java.io.File;
import java.io.IOException;
import java.sql.PreparedStatement;
import javax.swing.ImageIcon;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.UnsupportedLookAndFeelException;
import org.jdesktop.swingx.JXTextField;

/**
 *
 * @author agustin
 */
public class admin_dashboard extends javax.swing.JFrame {

    /**
     * Creates new form Log_in
     */
    public admin_dashboard(String setYear, String setSection) {
        setUndecorated(true);
        setBackground(new Color(0.0f, 0.0f, 0.0f, 0.0f));
        initComponents();
        setLocationRelativeTo(null); // Center the frame to screen
        yeartxt.setText(setYear);
        sectxt.setText(setSection);
        applyCustomFont();
    }

    private void applyCustomFont() {

        Title1.setFont(Custom_font.getFont("Bold.ttf", 18));
        Title2.setFont(Custom_font.getFont("Regular.ttf", 12));
        monthcmbx.setFont(Custom_font.getFont("Regular.ttf", 14));
        weekcmbx.setFont(Custom_font.getFont("Regular.ttf", 14));
        logoutbtn.setFont(Custom_font.getFont("Bold.ttf", 13));
        yearlbl.setFont(Custom_font.getFont("Regular.ttf", 13));
        seclbl.setFont(Custom_font.getFont("Regular.ttf", 13));
        yeartxt.setFont(Custom_font.getFont("Regular.ttf", 13));
        sectxt.setFont(Custom_font.getFont("Regular.ttf", 13));
        sunbtn.setFont(Custom_font.getFont("Bold.ttf", 18));
        monbtn.setFont(Custom_font.getFont("Bold.ttf", 18));
        tuebtn.setFont(Custom_font.getFont("Bold.ttf", 18));
        wedbtn.setFont(Custom_font.getFont("Bold.ttf", 18));
        thubtn.setFont(Custom_font.getFont("Bold.ttf", 18));
        fribtn.setFont(Custom_font.getFont("Bold.ttf", 18));
        satbtn.setFont(Custom_font.getFont("Bold.ttf", 18));
        sunlbl.setFont(Custom_font.getFont("Regular.ttf", 13));
        monlbl.setFont(Custom_font.getFont("Regular.ttf", 13));
        tuelbl.setFont(Custom_font.getFont("Regular.ttf", 13));
        wedlbl.setFont(Custom_font.getFont("Regular.ttf", 13));
        thulbl.setFont(Custom_font.getFont("Regular.ttf", 13));
        frilbl.setFont(Custom_font.getFont("Regular.ttf", 13));
        satlbl.setFont(Custom_font.getFont("Regular.ttf", 13));
        add_sched.setFont(Custom_font.getFont("Bold.ttf", 14));
        delete_db.setFont(Custom_font.getFont("Bold.ttf", 14));
        deletecmbx.setFont(Custom_font.getFont("Regular.ttf", 14));
        footer.setFont(Custom_font.getFont("Regular.ttf", 10));
        footer1.setFont(Custom_font.getFont("Regular.ttf", 10));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new com.k33ptoo.components.KGradientPanel();
        footer = new javax.swing.JLabel();
        pup_icon = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Title1 = new javax.swing.JLabel();
        Title2 = new javax.swing.JLabel();
        delete_db = new com.k33ptoo.components.KButton();
        kGradientPanel3 = new com.k33ptoo.components.KGradientPanel();
        monthcmbx = new combo_suggestion.ComboBoxSuggestion();
        weekcmbx = new combo_suggestion.ComboBoxSuggestion();
        kGradientPanel2 = new com.k33ptoo.components.KGradientPanel();
        yearlbl = new javax.swing.JLabel();
        yeartxt = new javax.swing.JLabel();
        seclbl = new javax.swing.JLabel();
        sectxt = new javax.swing.JLabel();
        kGradientPanel4 = new com.k33ptoo.components.KGradientPanel();
        sunlbl = new javax.swing.JLabel();
        monlbl = new javax.swing.JLabel();
        tuelbl = new javax.swing.JLabel();
        wedlbl = new javax.swing.JLabel();
        thulbl = new javax.swing.JLabel();
        frilbl = new javax.swing.JLabel();
        satlbl = new javax.swing.JLabel();
        kGradientPanel5 = new com.k33ptoo.components.KGradientPanel();
        sunbtn = new com.k33ptoo.components.KButton();
        monbtn = new com.k33ptoo.components.KButton();
        tuebtn = new com.k33ptoo.components.KButton();
        wedbtn = new com.k33ptoo.components.KButton();
        thubtn = new com.k33ptoo.components.KButton();
        fribtn = new com.k33ptoo.components.KButton();
        satbtn = new com.k33ptoo.components.KButton();
        logoutbtn = new com.k33ptoo.components.KButton();
        add_sched = new com.k33ptoo.components.KButton();
        footer1 = new javax.swing.JLabel();
        digitalClockPanel2 = new desktop_app.DigitalClockPanel();
        kGradientPanel6 = new com.k33ptoo.components.KGradientPanel();
        kGradientPanel7 = new com.k33ptoo.components.KGradientPanel();
        deletecmbx = new combo_suggestion.ComboBoxSuggestion();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Administrator Access");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusCycleRoot(false);
        setLocationByPlatform(true);
        setModalExclusionType(null);
        setUndecorated(true);
        setResizable(false);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        kGradientPanel1.setkEndColor(new java.awt.Color(255, 255, 255));
        kGradientPanel1.setkStartColor(new java.awt.Color(255, 255, 255));
        kGradientPanel1.setOpaque(false);
        kGradientPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        footer.setBackground(new java.awt.Color(102, 102, 102));
        footer.setFont(new java.awt.Font("Product Sans", 0, 10)); // NOI18N
        footer.setForeground(new java.awt.Color(153, 153, 153));
        footer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        footer.setText("System Project  |  Prof. Elias Austria");
        footer.setToolTipText("");
        kGradientPanel1.add(footer, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 520, 410, 30));

        pup_icon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pup_icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/desktop_app/assets/pup_50x50.png.png"))); // NOI18N
        kGradientPanel1.add(pup_icon, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, -1, -1));

        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        jPanel1.setOpaque(false);
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1MousePressed(evt);
            }
        });
        kGradientPanel1.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 990, 40));

        Title1.setFont(new java.awt.Font("Product Sans", 1, 18)); // NOI18N
        Title1.setForeground(new java.awt.Color(153, 17, 22));
        Title1.setText("PUPSCHED");
        kGradientPanel1.add(Title1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 170, 40));

        Title2.setFont(new java.awt.Font("Product Sans", 0, 12)); // NOI18N
        Title2.setForeground(new java.awt.Color(51, 51, 51));
        Title2.setText("Administrator Dashboard");
        kGradientPanel1.add(Title2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, 170, 70));

        delete_db.setBorder(null);
        delete_db.setForeground(new java.awt.Color(51, 51, 51));
        delete_db.setText("Delete");
        delete_db.setActionCommand("");
        delete_db.setFont(new java.awt.Font("Product Sans", 1, 14)); // NOI18N
        delete_db.setkAllowGradient(false);
        delete_db.setkBackGroundColor(new java.awt.Color(204, 204, 204));
        delete_db.setOpaque(true);
        delete_db.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_dbActionPerformed(evt);
            }
        });
        kGradientPanel1.add(delete_db, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 530, 100, 40));

        kGradientPanel3.setkEndColor(new java.awt.Color(204, 204, 204));
        kGradientPanel3.setkFillBackground(false);
        kGradientPanel3.setkStartColor(new java.awt.Color(204, 204, 204));
        kGradientPanel3.setOpaque(false);
        kGradientPanel3.setLayout(new java.awt.GridLayout(1, 0));

        monthcmbx.setBorder(null);
        monthcmbx.setEditable(false);
        monthcmbx.setForeground(new java.awt.Color(51, 51, 51));
        monthcmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "   January", "  February", "  March ", "  April", "  May", "  June", "  July", "  August", "  September", "  October", "  November", "  December" }));
        monthcmbx.setSelectedIndex(4);
        monthcmbx.setFont(new java.awt.Font("Product Sans", 0, 14)); // NOI18N
        monthcmbx.setOpaque(false);
        monthcmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthcmbxActionPerformed(evt);
            }
        });
        kGradientPanel3.add(monthcmbx);

        weekcmbx.setBorder(null);
        weekcmbx.setEditable(false);
        weekcmbx.setForeground(new java.awt.Color(51, 51, 51));
        weekcmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "  Week 1", "  Week 2", "  Week 3", "  Week 4" }));
        weekcmbx.setFont(new java.awt.Font("Product Sans", 0, 14)); // NOI18N
        weekcmbx.setOpaque(false);
        weekcmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weekcmbxActionPerformed(evt);
            }
        });
        kGradientPanel3.add(weekcmbx);

        kGradientPanel1.add(kGradientPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 220, 30));

        kGradientPanel2.setkEndColor(new java.awt.Color(204, 204, 204));
        kGradientPanel2.setkFillBackground(false);
        kGradientPanel2.setkStartColor(new java.awt.Color(204, 204, 204));
        kGradientPanel2.setOpaque(false);
        kGradientPanel2.setLayout(new java.awt.GridLayout(1, 0));

        yearlbl.setBackground(new java.awt.Color(102, 102, 102));
        yearlbl.setFont(new java.awt.Font("Product Sans", 0, 13)); // NOI18N
        yearlbl.setForeground(new java.awt.Color(153, 153, 153));
        yearlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        yearlbl.setText("Year:");
        yearlbl.setToolTipText("");
        kGradientPanel2.add(yearlbl);

        yeartxt.setBackground(new java.awt.Color(102, 102, 102));
        yeartxt.setFont(new java.awt.Font("Product Sans", 0, 13)); // NOI18N
        yeartxt.setForeground(new java.awt.Color(51, 51, 51));
        yeartxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        yeartxt.setText("null");
        yeartxt.setToolTipText("");
        kGradientPanel2.add(yeartxt);

        seclbl.setBackground(new java.awt.Color(102, 102, 102));
        seclbl.setFont(new java.awt.Font("Product Sans", 0, 13)); // NOI18N
        seclbl.setForeground(new java.awt.Color(153, 153, 153));
        seclbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        seclbl.setText("Section:");
        seclbl.setToolTipText("");
        kGradientPanel2.add(seclbl);

        sectxt.setBackground(new java.awt.Color(102, 102, 102));
        sectxt.setFont(new java.awt.Font("Product Sans", 0, 13)); // NOI18N
        sectxt.setForeground(new java.awt.Color(51, 51, 51));
        sectxt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sectxt.setText("null");
        sectxt.setToolTipText("");
        kGradientPanel2.add(sectxt);

        kGradientPanel1.add(kGradientPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 110, 220, 30));

        kGradientPanel4.setkEndColor(new java.awt.Color(204, 204, 204));
        kGradientPanel4.setkFillBackground(false);
        kGradientPanel4.setkStartColor(new java.awt.Color(204, 204, 204));
        kGradientPanel4.setOpaque(false);
        kGradientPanel4.setLayout(new java.awt.GridLayout(1, 7, 12, 5));

        sunlbl.setFont(new java.awt.Font("Product Sans", 0, 13)); // NOI18N
        sunlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sunlbl.setToolTipText("");
        sunlbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        kGradientPanel4.add(sunlbl);

        monlbl.setFont(new java.awt.Font("Product Sans", 0, 13)); // NOI18N
        monlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        monlbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        kGradientPanel4.add(monlbl);

        tuelbl.setFont(new java.awt.Font("Product Sans", 0, 13)); // NOI18N
        tuelbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tuelbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        kGradientPanel4.add(tuelbl);

        wedlbl.setFont(new java.awt.Font("Product Sans", 0, 13)); // NOI18N
        wedlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        wedlbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        kGradientPanel4.add(wedlbl);

        thulbl.setFont(new java.awt.Font("Product Sans", 0, 13)); // NOI18N
        thulbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        thulbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        kGradientPanel4.add(thulbl);

        frilbl.setFont(new java.awt.Font("Product Sans", 0, 13)); // NOI18N
        frilbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        frilbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        kGradientPanel4.add(frilbl);

        satlbl.setFont(new java.awt.Font("Product Sans", 0, 13)); // NOI18N
        satlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        satlbl.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        kGradientPanel4.add(satlbl);

        kGradientPanel1.add(kGradientPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, 960, 300));

        kGradientPanel5.setkEndColor(new java.awt.Color(255, 255, 255));
        kGradientPanel5.setkFillBackground(false);
        kGradientPanel5.setkStartColor(new java.awt.Color(204, 204, 204));
        kGradientPanel5.setOpaque(false);
        kGradientPanel5.setLayout(new java.awt.GridLayout(1, 0));

        sunbtn.setBorder(null);
        sunbtn.setForeground(new java.awt.Color(153, 17, 22));
        sunbtn.setText("Sun");
        sunbtn.setFont(new java.awt.Font("Product Sans", 1, 18)); // NOI18N
        sunbtn.setkAllowGradient(false);
        sunbtn.setkBackGroundColor(new java.awt.Color(255, 255, 255));
        sunbtn.setkBorderRadius(0);
        sunbtn.setkForeGround(new java.awt.Color(204, 0, 51));
        sunbtn.setOpaque(true);
        sunbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sunbtnActionPerformed(evt);
            }
        });
        kGradientPanel5.add(sunbtn);

        monbtn.setBorder(null);
        monbtn.setForeground(new java.awt.Color(51, 51, 51));
        monbtn.setText("Mon");
        monbtn.setFont(new java.awt.Font("Product Sans", 1, 18)); // NOI18N
        monbtn.setkAllowGradient(false);
        monbtn.setkBackGroundColor(new java.awt.Color(255, 255, 255));
        monbtn.setkBorderRadius(0);
        monbtn.setkForeGround(new java.awt.Color(204, 0, 51));
        monbtn.setOpaque(true);
        monbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monbtnActionPerformed(evt);
            }
        });
        kGradientPanel5.add(monbtn);

        tuebtn.setBorder(null);
        tuebtn.setForeground(new java.awt.Color(51, 51, 51));
        tuebtn.setText("Tue");
        tuebtn.setFont(new java.awt.Font("Product Sans", 1, 18)); // NOI18N
        tuebtn.setkAllowGradient(false);
        tuebtn.setkBackGroundColor(new java.awt.Color(255, 255, 255));
        tuebtn.setkBorderRadius(0);
        tuebtn.setkForeGround(new java.awt.Color(204, 0, 51));
        tuebtn.setOpaque(true);
        tuebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tuebtnActionPerformed(evt);
            }
        });
        kGradientPanel5.add(tuebtn);

        wedbtn.setBorder(null);
        wedbtn.setForeground(new java.awt.Color(51, 51, 51));
        wedbtn.setText("Wed");
        wedbtn.setFont(new java.awt.Font("Product Sans", 1, 18)); // NOI18N
        wedbtn.setkAllowGradient(false);
        wedbtn.setkBackGroundColor(new java.awt.Color(255, 255, 255));
        wedbtn.setkBorderRadius(0);
        wedbtn.setkForeGround(new java.awt.Color(204, 0, 51));
        wedbtn.setOpaque(true);
        wedbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wedbtnActionPerformed(evt);
            }
        });
        kGradientPanel5.add(wedbtn);

        thubtn.setBorder(null);
        thubtn.setForeground(new java.awt.Color(51, 51, 51));
        thubtn.setText("Thu");
        thubtn.setFont(new java.awt.Font("Product Sans", 1, 18)); // NOI18N
        thubtn.setkAllowGradient(false);
        thubtn.setkBackGroundColor(new java.awt.Color(255, 255, 255));
        thubtn.setkBorderRadius(0);
        thubtn.setkForeGround(new java.awt.Color(204, 0, 51));
        thubtn.setOpaque(true);
        thubtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thubtnActionPerformed(evt);
            }
        });
        kGradientPanel5.add(thubtn);

        fribtn.setBorder(null);
        fribtn.setForeground(new java.awt.Color(51, 51, 51));
        fribtn.setText("Fri");
        fribtn.setFont(new java.awt.Font("Product Sans", 1, 18)); // NOI18N
        fribtn.setkAllowGradient(false);
        fribtn.setkBackGroundColor(new java.awt.Color(255, 255, 255));
        fribtn.setkBorderRadius(0);
        fribtn.setkForeGround(new java.awt.Color(204, 0, 51));
        fribtn.setOpaque(true);
        fribtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fribtnActionPerformed(evt);
            }
        });
        kGradientPanel5.add(fribtn);

        satbtn.setBorder(null);
        satbtn.setForeground(new java.awt.Color(51, 51, 51));
        satbtn.setText("Sat");
        satbtn.setFont(new java.awt.Font("Product Sans", 1, 18)); // NOI18N
        satbtn.setkAllowGradient(false);
        satbtn.setkBackGroundColor(new java.awt.Color(255, 255, 255));
        satbtn.setkBorderRadius(0);
        satbtn.setkForeGround(new java.awt.Color(204, 0, 51));
        satbtn.setOpaque(true);
        satbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                satbtnActionPerformed(evt);
            }
        });
        kGradientPanel5.add(satbtn);

        kGradientPanel1.add(kGradientPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 960, 20));

        logoutbtn.setBorder(null);
        logoutbtn.setText("Logout");
        logoutbtn.setFont(new java.awt.Font("Product Sans", 1, 13)); // NOI18N
        logoutbtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        logoutbtn.setkAllowGradient(false);
        logoutbtn.setkBackGroundColor(new java.awt.Color(102, 102, 102));
        logoutbtn.setOpaque(true);
        logoutbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutbtnActionPerformed(evt);
            }
        });
        kGradientPanel1.add(logoutbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 75, 80, 30));

        add_sched.setBorder(null);
        add_sched.setText("Update");
        add_sched.setFont(new java.awt.Font("Product Sans", 1, 14)); // NOI18N
        add_sched.setkAllowGradient(false);
        add_sched.setkBackGroundColor(new java.awt.Color(153, 17, 22));
        add_sched.setOpaque(true);
        add_sched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_schedActionPerformed(evt);
            }
        });
        kGradientPanel1.add(add_sched, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 530, 80, 40));

        footer1.setBackground(new java.awt.Color(102, 102, 102));
        footer1.setFont(new java.awt.Font("Product Sans", 1, 10)); // NOI18N
        footer1.setForeground(new java.awt.Color(153, 153, 153));
        footer1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        footer1.setText("Polytechnic University of the Philippines - San Juan Campus");
        footer1.setToolTipText("");
        kGradientPanel1.add(footer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 531, 410, 30));

        digitalClockPanel2.setBackground(new java.awt.Color(255, 255, 255));
        digitalClockPanel2.setForeground(new java.awt.Color(51, 51, 51));
        kGradientPanel1.add(digitalClockPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(805, 80, 120, 20));

        kGradientPanel6.setkEndColor(new java.awt.Color(204, 204, 204));
        kGradientPanel6.setkFillBackground(false);
        kGradientPanel6.setkStartColor(new java.awt.Color(204, 204, 204));
        kGradientPanel6.setOpaque(false);
        kGradientPanel6.setLayout(new java.awt.GridLayout(1, 0));
        kGradientPanel1.add(kGradientPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 75, 130, 30));

        kGradientPanel7.setkEndColor(new java.awt.Color(204, 204, 204));
        kGradientPanel7.setkFillBackground(false);
        kGradientPanel7.setkStartColor(new java.awt.Color(204, 204, 204));
        kGradientPanel7.setOpaque(false);
        kGradientPanel7.setLayout(new java.awt.GridLayout(1, 0));

        deletecmbx.setBorder(null);
        deletecmbx.setEditable(false);
        deletecmbx.setForeground(new java.awt.Color(51, 51, 51));
        deletecmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "        Sunday", "        Monday", "        Tuesday", "        Wednesday", "        Thursday", "        Friday", "        Saturday" }));
        deletecmbx.setSelectedIndex(-1);
        deletecmbx.setFont(new java.awt.Font("Product Sans", 0, 14)); // NOI18N
        deletecmbx.setOpaque(false);
        deletecmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletecmbxActionPerformed(evt);
            }
        });
        kGradientPanel7.add(deletecmbx);

        kGradientPanel1.add(kGradientPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 530, 130, 40));

        getContentPane().add(kGradientPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1070, 620));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void DynamicLabelUpdater(JLabel getLabel) {
        targetLabel = getLabel;

    }

    private void jPanel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MousePressed
        posX = evt.getX();
        posY = evt.getY();
    }//GEN-LAST:event_jPanel1MousePressed

    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        setLocation(evt.getXOnScreen() - posX, evt.getYOnScreen() - posY);
    }//GEN-LAST:event_jPanel1MouseDragged

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered

    }//GEN-LAST:event_formMouseEntered

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained

    }//GEN-LAST:event_formFocusGained

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost

    }//GEN-LAST:event_formFocusLost

    private void delete_dbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_dbActionPerformed
        try {
            String delete_day = (String) deletecmbx.getSelectedItem();

            if (delete_day != null && !delete_day.trim().isEmpty()) {
                // Create a custom panel for the confirmation dialog
                JPanel panel = new JPanel(new BorderLayout(10, 10));
                JLabel messageLabel = new JLabel("Are you sure you want to delete the schedule for " + delete_day.trim() + "?");
                messageLabel.setFont(new Font("Arial", Font.BOLD, 14));
                panel.add(messageLabel, BorderLayout.CENTER);

                // Show confirmation dialog
                int response = JOptionPane.showConfirmDialog(null, panel, "Confirm Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

                if (response == JOptionPane.YES_OPTION) {
                    String trimmed_day = delete_day.trim();
                    if (trimmed_day.equals("Sunday") && !sunlbl.getText().isBlank()) {
                        sunlbl.setText("");
                    } else if (trimmed_day.equals("Monday") && !monlbl.getText().isBlank()) {
                        monlbl.setText("");
                    } else if (trimmed_day.equals("Tuesday") && !tuelbl.getText().isBlank()) {
                        tuelbl.setText("");
                    } else if (trimmed_day.equals("Wednesday") && !wedlbl.getText().isBlank()) {
                        wedlbl.setText("");
                    } else if (trimmed_day.equals("Thursday") && !thulbl.getText().isBlank()) {
                        thulbl.setText("");
                    } else if (trimmed_day.equals("Friday") && !frilbl.getText().isBlank()) {
                        frilbl.setText("");
                    } else if (trimmed_day.equals("Saturday") && !satlbl.getText().isBlank()) {
                        satlbl.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "The schedule for " + delete_day.trim() + " is already blank or null.", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }

                    delete_db();
                }
            } else {
                JOptionPane.showMessageDialog(null, "No day selected.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();  // This will print the error to the console for debugging
        }


    }//GEN-LAST:event_delete_dbActionPerformed

    private void fribtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fribtnActionPerformed
        day_db = 6;
        time.setVisible(true);
        DynamicLabelUpdater(frilbl);
    }//GEN-LAST:event_fribtnActionPerformed

    private void thubtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thubtnActionPerformed
        day_db = 5;
        time.setVisible(true);
        DynamicLabelUpdater(thulbl);
    }//GEN-LAST:event_thubtnActionPerformed

    private void wedbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wedbtnActionPerformed
        day_db = 4;
        time.setVisible(true);
        DynamicLabelUpdater(wedlbl);
    }//GEN-LAST:event_wedbtnActionPerformed

    private void tuebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tuebtnActionPerformed
        day_db = 3;
        time.setVisible(true);
        DynamicLabelUpdater(tuelbl);
    }//GEN-LAST:event_tuebtnActionPerformed

    private void sunbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sunbtnActionPerformed
        day_db = 1;
        time.setVisible(true);
        DynamicLabelUpdater(sunlbl);
    }//GEN-LAST:event_sunbtnActionPerformed

    private void satbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_satbtnActionPerformed
        day_db = 7;
        time.setVisible(true);
        DynamicLabelUpdater(satlbl);
    }//GEN-LAST:event_satbtnActionPerformed

    private void monbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monbtnActionPerformed
        day_db = 2;
        time.setVisible(true);
        DynamicLabelUpdater(monlbl);
    }//GEN-LAST:event_monbtnActionPerformed

    private void monthcmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthcmbxActionPerformed
        int week_db = weekcmbx.getSelectedIndex() + 1;
        int month_db = monthcmbx.getSelectedIndex() - 3;

        System.out.println("Month: " + month_db);
        System.out.println("Week: " + week_db);

        String sched_code = String.valueOf(month_db) + String.valueOf(week_db);
        System.out.println("Sched Code: " + sched_code);

        sunlbl.setText("");
        monlbl.setText("");
        tuelbl.setText("");
        wedlbl.setText("");
        thulbl.setText("");
        frilbl.setText("");
        satlbl.setText("");

        // Fetch the data
        printDataByStartingSchedCode(sched_code);

        // Display fetched data (for debugging purposes)

    }//GEN-LAST:event_monthcmbxActionPerformed

    int x = 0; // Initialize x
    String[] split_course;

    public void printDataByStartingSchedCode(String startCode) {
        PreparedStatement ps;
        ResultSet rs;

        String query = "SELECT day_id, course, room, time, note FROM schedule WHERE week_id LIKE ?";

        try {
            ps = Db_con_3.getConnection().prepareStatement(query);
            ps.setString(1, startCode + "%"); // Append % to match any characters after startCode

            rs = ps.executeQuery();

            // Print header
            System.out.println("Results for week_id starting with: " + startCode);
            System.out.println("--------------------------------------------");

            // Iterate over the ResultSet to fetch and print each row
            while (rs.next()) {
                // Data exists
                int day_id = rs.getInt("day_id");
                String course = rs.getString("course");
                String room = rs.getString("room");
                String time = rs.getString("time");
                String note = rs.getString("note");

                if (isGreaterThanTwoChars(course) && isGreaterThanTwoChars(room)
                        && isGreaterThanTwoChars(time) && isGreaterThanTwoChars(note)) {
                    System.out.println("Day: " + day_id);
                    System.out.println("Course: " + course);
                    System.out.println("Room: " + room);
                    System.out.println("Time: " + time);
                    System.out.println("Note: " + note);

                    // Split the strings
                    String[] split_course = course.split(";");
                    String[] split_room = room.split(";");
                    String[] split_time = time.split(";");
                    String[] split_note = note.split(";");

                    // Create HTML formatted text
                    StringBuilder formattedText = new StringBuilder("<html><div style='text-align: center;'>");
                    for (int i = 0; i < split_course.length; i++) {
                        formattedText.append(split_course[i]).append("<br>")
                                .append(split_room[i]).append("<br>")
                                .append(split_time[i]).append("<br>")
                                .append(split_note[i]).append("<br>-----<br>");
                    }
                    formattedText.append("</div></html>");

                    // Set the formatted text to the corresponding label
                    switch (day_id) {
                        case 1:
                            sunlbl.setText(formattedText.toString());
                            break;
                        case 2:
                            monlbl.setText(formattedText.toString());
                            break;
                        case 3:
                            tuelbl.setText(formattedText.toString());
                            break;
                        case 4:
                            wedlbl.setText(formattedText.toString());
                            break;
                        case 5:
                            thulbl.setText(formattedText.toString());
                            break;
                        case 6:
                            frilbl.setText(formattedText.toString());
                            break;
                        case 7:
                            satlbl.setText(formattedText.toString());
                            break;
                        default:
                            // Handle unexpected day_id values if necessary
                            break;
                    }

                    System.out.println(); // Newline after printing all courses
                    System.out.println("--------------------------------------------");
                }
                x++;
            }

            // Close ResultSet, PreparedStatement, and Connection
            rs.close();
            ps.close();

        } catch (SQLException ex) {
            // Handle SQL exceptions
            ex.printStackTrace();
        }
    }

    private boolean isGreaterThanTwoChars(String value) {
        return value != null && value.trim().length() > 2;
    }


    private void add_schedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_schedActionPerformed
        try {
            // Get the current text from the JLabel

            save_db();
            String currentText = targetLabel.getText();

            // Define the new formatted text to append
            String newFormattedText = room.course + "<br>"
                    + room.room + "<br>"
                    + room.setTime + "<br>-----<br>";

            // Check if the current text already has HTML structure
            if (currentText.startsWith("<html>")) {
                // Remove the closing tags from the current text
                currentText = currentText.substring(0, currentText.length() - "</div></html>".length());
                // Append the new formatted text
                currentText += newFormattedText + "</div></html>";
            } else {
                // If the current text does not have HTML structure, initialize it with the new formatted text
                currentText = "<html><div style='text-align: center;'>" + newFormattedText + "</div></html>";
            }

            // Set the updated text back to the JLabel
            targetLabel.setText(currentText);
        } catch (IOException ex) {
            Logger.getLogger(admin_dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_add_schedActionPerformed

    public void delete_db() {
        int week_db = weekcmbx.getSelectedIndex() + 1;
        int month_db = monthcmbx.getSelectedIndex() - 3;
        int day_delete = deletecmbx.getSelectedIndex() + 1;

        System.out.println("Month: " + month_db);
        System.out.println("Week: " + week_db);
        System.out.println("Day: " + day_delete);

        String sched_code = String.valueOf(month_db) + String.valueOf(week_db) + String.valueOf(day_delete);
        System.out.println("Sched Code to delete: " + sched_code);

        PreparedStatement ps = null;

        try {
            // Update query to update the schedule table
            String updateQuery = "UPDATE schedule SET course = ?, room = ?, time = ?, note = ? WHERE week_id = ?";
            ps = Db_con_3.getConnection().prepareStatement(updateQuery);
            ps.setString(1, "");  // Set course value here
            ps.setString(2, "");  // Set room value here
            ps.setString(3, "");  // Set time value here
            ps.setString(4, "");  // Set note value here
            ps.setString(5, sched_code);  // Set week_id value

            int rowsAffected = ps.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Schedule updated successfully.");
            } else {
                System.out.println("Error: Schedule not updated or week_id not found.");
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            // Close resources in the finally block
            try {
                if (ps != null) {
                    ps.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    public void save_db() throws IOException {
        int week_db = weekcmbx.getSelectedIndex() + 1;
        int month_db = monthcmbx.getSelectedIndex() - 3;

        System.out.println("Month: " + month_db);
        System.out.println("Week: " + week_db);
        System.out.println("Day: " + day_db);

        String sched_code = String.valueOf(month_db) + String.valueOf(week_db) + String.valueOf(day_db);
        System.out.println("Sched Code: " + sched_code);

        // Variables holding the data to send to the database
        String newCourse = room.course;
        String newRoom = room.room; // Renamed to avoid conflict with class name
        String newTime = room.setTime;
        String newNote = room.notetxt.getText();

        PreparedStatement ps = null;
        ResultSet rs = null;
        Connection conn = null;

        try {

            // First, retrieve the existing entry if it exists
            String selectQuery = "SELECT course, room, time, note FROM schedule WHERE week_id = ?";
            ps = Db_con_3.getConnection().prepareStatement(selectQuery);
            ps.setString(1, sched_code);
            rs = ps.executeQuery();

            if (rs.next()) {
                // Retrieve existing values
                String existingCourse = rs.getString("course");
                String existingRoom = rs.getString("room");
                String existingTime = rs.getString("time");
                String existingNote = rs.getString("note");

                // Append new values to existing ones
                String updatedCourse = existingCourse + ";" + newCourse;
                String updatedRoom = existingRoom + ";" + newRoom;
                String updatedTime = existingTime + ";" + newTime;
                String updatedNote = existingNote + ";" + newNote;

                // Update the entry with appended values
                String updateQuery = "UPDATE schedule SET course = ?, room = ?, time = ?, note = ? WHERE week_id = ?";
                ps = Db_con_3.getConnection().prepareStatement(updateQuery);
                ps.setString(1, updatedCourse);
                ps.setString(2, updatedRoom);
                ps.setString(3, updatedTime);
                ps.setString(4, updatedNote);
                ps.setString(5, sched_code);

                int rowsAffected = ps.executeUpdate();
                if (rowsAffected > 0) {
                    System.out.println("Schedule updated successfully.");
                } else {
                    System.out.println("Error: Schedule not updated or week_id not found.");
                }
            } else {
                // If no existing entry, insert a new one
                String insertQuery = "INSERT INTO schedule (week_id, course, room, time, note) VALUES (?, ?, ?, ?, ?)";
                ps = Db_con_3.getConnection().prepareStatement(insertQuery);
                ps.setString(1, sched_code);
                ps.setString(2, newCourse);
                ps.setString(3, newRoom);
                ps.setString(4, newTime);
                ps.setString(5, newNote);

                int rowsInserted = ps.executeUpdate();
                if (rowsInserted > 0) {
                    System.out.println("Schedule inserted successfully.");
                } else {
                    System.out.println("Error: Schedule not inserted.");
                }
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (ps != null) {
                    ps.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }


    private void logoutbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutbtnActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to logout?", "Logout", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            dispose();
        }
    }//GEN-LAST:event_logoutbtnActionPerformed

    private void weekcmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weekcmbxActionPerformed
        int week_db = weekcmbx.getSelectedIndex() + 1;
        int month_db = monthcmbx.getSelectedIndex() - 3;

        System.out.println("Month: " + month_db);
        System.out.println("Week: " + week_db);

        String sched_code = String.valueOf(month_db) + String.valueOf(week_db);
        System.out.println("Sched Code: " + sched_code);

        sunlbl.setText("");
        monlbl.setText("");
        tuelbl.setText("");
        wedlbl.setText("");
        thulbl.setText("");
        frilbl.setText("");
        satlbl.setText("");

        // Fetch the data
        printDataByStartingSchedCode(sched_code);

        // Display fetched data (for debugging purposes)
    }//GEN-LAST:event_weekcmbxActionPerformed

    private void deletecmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletecmbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deletecmbxActionPerformed

    public ArrayList<String> data_fetch(String tableName, String columnName) {
        PreparedStatement ps;
        ResultSet rs;
        ArrayList<String> fetchedDataList = new ArrayList<>();

        String query = "SELECT " + columnName + " FROM " + tableName;

        try {
            ps = Db_con.getConnection().prepareStatement(query);

            rs = ps.executeQuery();

            // Iterate over the ResultSet to fetch each row
            while (rs.next()) {
                // Data exists
                String fetchedData = rs.getString(columnName);
                fetchedDataList.add(fetchedData);
            }

            // Close ResultSet, PreparedStatement, and Connection
            rs.close();
            ps.close();
        } catch (SQLException ex) {
            // Handle SQL exceptions
            ex.printStackTrace();
        }

        return fetchedDataList;
    }

    /**
     * \
     *
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Flatlaf Light".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            System.out.println("Error: " + e);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                anim.fadeIn(dash, 150, 50);
                dash.setVisible(true);

            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title1;
    private javax.swing.JLabel Title2;
    public static com.k33ptoo.components.KButton add_sched;
    public static com.k33ptoo.components.KButton delete_db;
    public static combo_suggestion.ComboBoxSuggestion deletecmbx;
    private desktop_app.DigitalClockPanel digitalClockPanel2;
    private javax.swing.JLabel footer;
    private javax.swing.JLabel footer1;
    private com.k33ptoo.components.KButton fribtn;
    private javax.swing.JLabel frilbl;
    private javax.swing.JPanel jPanel1;
    private com.k33ptoo.components.KGradientPanel kGradientPanel1;
    private com.k33ptoo.components.KGradientPanel kGradientPanel2;
    private com.k33ptoo.components.KGradientPanel kGradientPanel3;
    private com.k33ptoo.components.KGradientPanel kGradientPanel4;
    private com.k33ptoo.components.KGradientPanel kGradientPanel5;
    private com.k33ptoo.components.KGradientPanel kGradientPanel6;
    private com.k33ptoo.components.KGradientPanel kGradientPanel7;
    public static com.k33ptoo.components.KButton logoutbtn;
    private com.k33ptoo.components.KButton monbtn;
    private javax.swing.JLabel monlbl;
    public static combo_suggestion.ComboBoxSuggestion monthcmbx;
    private javax.swing.JLabel pup_icon;
    private com.k33ptoo.components.KButton satbtn;
    private javax.swing.JLabel satlbl;
    private javax.swing.JLabel seclbl;
    public static javax.swing.JLabel sectxt;
    private com.k33ptoo.components.KButton sunbtn;
    public javax.swing.JLabel sunlbl;
    private com.k33ptoo.components.KButton thubtn;
    private javax.swing.JLabel thulbl;
    private com.k33ptoo.components.KButton tuebtn;
    private javax.swing.JLabel tuelbl;
    private com.k33ptoo.components.KButton wedbtn;
    private javax.swing.JLabel wedlbl;
    public static combo_suggestion.ComboBoxSuggestion weekcmbx;
    private javax.swing.JLabel yearlbl;
    public static javax.swing.JLabel yeartxt;
    // End of variables declaration//GEN-END:variables

    //custom declarations
    int posX, posY;
    private boolean isEyeIcon = true;
    private boolean isPasswordVisible = false;
    public static Forgot_pwrd forgot = new Forgot_pwrd();
    public static Custom_animations anim = new Custom_animations();
    static admin_dashboard dash = new admin_dashboard("", "");
    static Custom_Errdialog dia = new Custom_Errdialog();
    static int log_attempt = 0;
    static Sec_year sec_year = new Sec_year();
    static Sub_time time = new Sub_time();
    static Sub_room room = new Sub_room();
    static JLabel targetLabel = new JLabel();
    public static int week_db, day_db;
    public static String sched_code;
    static Custom_Yesnodialog yesno = new Custom_Yesnodialog();

}
